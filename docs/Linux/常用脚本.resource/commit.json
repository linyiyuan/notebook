{"compress":true,"commitItems":[["c18b9b60-1cad-4ffc-81bb-0eb7173f075e",1652689568894,"",[[1652689560845,["mac@macdeMacBook-Pro.local",[[1,0,"# 常用脚本\n\n\n\n"]],[0,0],[9,9]]],[1652689562259,["mac@macdeMacBook-Pro.local",[[1,0,"作者：地球的外星人君\n链接：https://zhuanlan.zhihu.com/p/515140496\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n（1）用户猜数字#!/bin/bash\n\n"],[1,2,"脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,\n# 猜小了或猜大了,直至用户猜对脚本结束。\n\n# RANDOM 为系统自带的系统变量,值为 0‐32767的随机数\n# 使用取余算法将随机数变为 1‐100 的随机数\nnum=$[RANDOM%100+1]\necho \"$num\"\n\n# 使用 read 提示用户猜数字\n# 使用 if 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),\n# ‐lt(小于),‐le(小于等于)\nwhile :\ndo \n read -p \"计算机生成了一个 1‐100 的随机数,你猜: \" cai  \n    if [ $cai -eq $num ]   \n    then     \n        echo \"恭喜,猜对了\"     \n        exit  \n     elif [ $cai -gt $num ]  \n     then       \n            echo \"Oops,猜大了\"    \n       else      \n            echo \"Oops,猜小了\" \n  fi\ndone（2）查看有多少远程的 IP 在连接本机#!/bin/bash\n\n#!/bin/bash\n# 查看有多少远程的 IP 在连接本机(不管是通过 ssh 还是 web 还是 ftp 都统计) \n\n# 使用 netstat ‐atn 可以查看本机所有连接的状态,‐a 查看所有,\n# -t仅显示 tcp 连接的信息,‐n 数字格式显示\n# Local Address(第四列是本机的 IP 和端口信息)\n# Foreign Address(第五列是远程主机的 IP 和端口信息)\n# 使用 awk 命令仅显示第 5 列数据,再显示第 1 列 IP 地址的信息\n# sort 可以按数字大小排序,最后使用 uniq 将多余重复的删除,并统计重复的次数\nnetstat -atn  |  awk  '{print $5}'  | awk  '{print $1}' | sort -nr  |  uniq -c(3）helloworld#!/bin/bash\n\nfunction example {\necho \"Hello world!\"\n}\nexample（4）打印 tomcat 的pid#!/bin/sh`\n\nv1=\"Hello\"\nv2=\"world\"\nv3=${v1}${v2}\necho $v3\n\npidlist=`ps -ef|grep apache-tomcat-7.0.75|grep -v \"grep\"|awk '{print $2}'`\necho $pidlist\necho \"tomcat Id list :$pidlist\"  //显示pid（5）脚本编写 剪刀 、 石头、布游戏#!/bin/bash\n\ngame=(石头 剪刀 布)\nnum=$[RANDOM%3]\ncomputer=${game[$sum]}\n\necho \"请根据下列提示选择您的出拳手势\"\necho \" 1. 石头\"\necho \" 2. 剪刀\"\necho \" 3. 布 \"\n\nread -p \"请选择 1-3 ：\" person\ncase $person in\n1)\n  if [ $num -eq 0 ]\n  then \n    echo \"平局\"\n    elif [ $num -eq 1 ]\n    then\n      echo \"你赢\"\n    else \n      echo \"计算机赢\"\nfi;;\n2)\n if [ $num -eq 0 ]\n then\n    echo \"计算机赢\"\n    elif [ $num -eq 1 ] \n    then\n     echo \"平局\"\n    else \n      echo \"你赢\"\nfi;;\n3)\n if [ $num -eq 0 ]\n then  \n   echo \"你赢\"\n   elif [ $num -eq 1 ]\n   then \n     echo \"计算机赢\"\n   else \n      echo \"平局\"\nfi;;\n*)\n  echo \"必须输入1-3 的数字\"\nesac（6）九九乘法表#!/bin/bash\n\nfor i in `seq 9`\ndo \n for j in `seq $i`\n do \n echo -n \"$j*$i=$[i*j] \"\n done\n    echo\ndone（7）脚本用源码来安装 memcached 服务器#!/bin/bash\n# 一键部署 memcached \n\n# 脚本用源码来安装 memcached 服务器\n# 注意:如果软件的下载链接过期了,请更新 memcached 的下载链接\nwget http://www.memcached.org/files/memcached-1.5.1.tar.gz\nyum -y install gcc\ntar -xf  memcached‐1.5.1.tar.gz\ncd memcached‐1.5.1\n./configure\nmake\nmake install（8）检测本机当前用户是否为超级管理员#!/bin/bash\n\n# 检测本机当前用户是否为超级管理员,如果是管理员,则使用 yum 安装 vsftpd,如果不\n# 是,则提示您非管理员(使用字串对比版本) \nif [ $USER == \"root\" ] \nthen \n yum -y install vsftpd\nelse \n echo \"您不是管理员，没有权限安装软件\"\nfi（9）if 运算表达式#!/bin/bash -xv\n\nif [ $1 -eq 2 ] ;then\n echo \"wo ai wenmin\"\nelif [ $1 -eq 3 ] ;then \n echo \"wo ai wenxing \"\nelif [ $1 -eq 4 ] ;then \n echo \"wo de xin \"\nelif [ $1 -eq 5 ] ;then\n echo \"wo de ai \"\nfi（10）脚本 杀掉 tomcat 进程并重新启动#!/bin/bash\n\n#kill tomcat pid\n\npidlist=`ps -ef|grep apache-tomcat-7.0.75|grep -v \"grep\"|awk '{print $2}'`  #找到tomcat的PID号\n\necho \"tomcat Id list :$pidlist\"  //显示pid\n\nkill -9 $pidlist  #杀掉改进程\n\necho \"KILL $pidlist:\" //提示进程以及被杀掉\n\necho \"service stop success\"\n\necho \"start tomcat\"\n\ncd /opt/apache-tomcat-7.0.75\n\npwd \n\nrm -rf work/*\n\ncd bin\n\n./startup.sh #;tail -f ../logs/catalina.out（11）打印国际象棋棋盘#!/bin/bash\n# 打印国际象棋棋盘\n# 设置两个变量,i 和 j,一个代表行,一个代表列,国际象棋为 8*8 棋盘\n# i=1 是代表准备打印第一行棋盘,第 1 行棋盘有灰色和蓝色间隔输出,总共为 8 列\n# i=1,j=1 代表第 1 行的第 1 列;i=2,j=3 代表第 2 行的第 3 列\n# 棋盘的规律是 i+j 如果是偶数,就打印蓝色色块,如果是奇数就打印灰色色块\n# 使用 echo ‐ne 打印色块,并且打印完成色块后不自动换行,在同一行继续输出其他色块\nfor i in {1..8}\ndo\n   for j in {1..8}\n   do\n    sum=$[i+j]\n  if [  $[sum%2] -eq 0 ];then\n    echo -ne \"\\033[46m  \\033[0m\"\n  else\n   echo -ne \"\\033[47m  \\033[0m\"\n  fi\n   done\n   echo\ndone\n\n（12）统计当前 Linux 系统中可以登录计算机的账户有多少个#!/bin/bash\n\n# 统计当前 Linux 系统中可以登录计算机的账户有多少个\n#方法 1:\ngrep \"bash$\" /etc/passwd | wc -l\n#方法 2：\nawk -f : '/bash$/{x++}end{print x}' /etc/passwd（13）备份 MySQL 表数据#!/bin/sh\n\nsource /etc/profile\ndbName=mysql\ntableName=db\necho [`date +'%Y-%m-%d %H:%M:%S'`]' start loading data...'\nmysql -uroot -proot -P3306 ${dbName} -e \"LOAD DATA LOCAL INFILE '# /home/wenmin/wenxing.txt' INTO TABLE ${tableName} FIELDS TERMINATED BY ';'\"\necho [`date +'%Y-%m-%d %H:%M:%S'`]' end loading data...'\nexit\nEOF（14）使用死循环实时显示 eth0 网卡发送的数据包流量#!/bin/bash\n\n# 使用死循环实时显示 eth0 网卡发送的数据包流量 \n\nwhile :\ndo \n echo '本地网卡 ens33 流量信息如下：'\n ifconfig ens33 | grep \"RX pack\" | awk '{print $5}'\n     ifconfig ens33 | grep \"TX pack\" | awk '{print $5}'\n sleep 1\ndone（15）编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态，哪些主机处于关机#!/bin/bash\n\n# 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机\n# 状态(for 版本)\nfor i in {1..254}\ndo \n # 每隔0.3秒ping一次，一共ping2次，并以1毫秒为单位设置ping的超时时间\n ping -c 2 -i 0.3 -W 1 192.168.1.$i &>/dev/null\n     if [ $? -eq 0 ];then\n echo \"192.168.1.$i is up\"\n else \n echo \"192.168.1.$i is down\"\n fi\ndone（16）编写脚本：提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户#!/bin/bash\n# 编写脚本:提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户\n# 不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默\n# 认的 123456 作为默认密码。\n\nread -p \"请输入用户名：\" user\n#使用‐z 可以判断一个变量是否为空,如果为空,提示用户必须输入账户名,并退出脚本,退出码为 2\n#没有输入用户名脚本退出后,使用$?查看的返回码为 2\nif [ -z $user ]; then\n echo \" 您不需要输入账户名\" \n exit 2\nfi \n#使用 stty ‐echo 关闭 shell 的回显功能\n#使用 stty  echo 打开 shell 的回显功能\nstty -echo \nread -p \"请输入密码：\" pass\nstty echo \npass=${pass:-123456}\nuseradd \"$user\"\necho \"$pass\" | passwd --stdin \"$user\"（17）使用脚本对输入的三个整数进行排序#!/bin/bash\n\n# 依次提示用户输入 3 个整数,脚本根据数字大小依次排序输出 3 个数字\nread -p \" 请输入一个整数：\" num1\nread -p \" 请输入一个整数：\" num2\nread -p \" 请输入一个整数:  \" num3\n\n# 不管谁大谁小,最后都打印 echo \"$num1,$num2,$num3\"\n# num1 中永远存最小的值,num2 中永远存中间值,num3 永远存最大值\n# 如果输入的不是这样的顺序,则改变数的存储顺序,如:可以将 num1 和 num2 的值对调\ntmp=0\n# 如果 num1 大于 num2,就把 num1 和和 num2 的值对调,确保 num1 变量中存的是最小值\nif [ $num1 -gt $num2 ];then\n tmp=$num1\n num1=$num2\n num2=tmp\nfi\n# 如果 num1 大于 num3,就把 num1 和 num3 对调,确保 num1 变量中存的是最小值\nif [ $num1 -gt $num3 ];then\n tmp=$num1\n num1=$num3\n num3=$tmp\nfi\n# 如果 num2 大于 num3,就把 num2 和 num3 对调,确保 num2 变量中存的是最小值\nif [ $num2 -gt $num3 ];then\n tmp=$num2\n num2=$num3\n num3=$tmp\nfi\necho \"排序后数据（从小到大）为：$num1,$num2,$num3\"（18）根据计算机当前时间，返回问候语，可以将该脚本设置为开机启动#!/bin/bash\n# 根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动 \n\n# 00‐12 点为早晨,12‐18 点为下午,18‐24 点为晚上\n# 使用 date 命令获取时间后,if 判断时间的区间,确定问候语内容\ntm=$(date +%H)\nif [ $tm -le 12 ];then\n msg=\"Good Morning $USER\"\nelif [ $tm -gt 12 -a $tm -le 18 ];then\n   msg=\"Good Afternoon $USER\"\nelse\n   msg=\"Good Night $USER\"\nfi\necho \"当前时间是:$(date +\"%Y‐%m‐%d %H:%M:%S\")\"\necho -e \"\\033[34m$msg\\033[0m\"（19）将 I lov cls 写入到 txt 文件中#!/bin/bash\n\ncd /home/wenmin/\ntouch wenxing.txt\necho \"I lov cls\" >>wenxing.txt（20）脚本编写 for 循环判断#!/bin/bash\n\ns=0;\nfor((i=1;i<100;i++))\ndo \n s=$[$s+$i]\ndone \n\necho $s\n\nr=0;\na=0;\nb=0;\nfor((x=1;x<9;x++))\ndo \n a=$[$a+$x] \necho $x\ndone\nfor((y=1;y<9;y++))\ndo \n b=$[$b+$y]\necho $y\n\ndone\n\necho $r=$[$a+$b]（21）脚本编写 for 循环判断#!/bin/bash\n\nfor i in \"$*\"\ndo \n echo \"wenmin xihuan $i\"\ndone\n\nfor j in \"$@\"\ndo \n echo \"wenmin xihuan $j\"\ndone（22）脚本 每周 5 使用 tar 命令备份/var/log 下的所有日志文件#!/bin/bash\n# 每周 5 使用 tar 命令备份/var/log 下的所有日志文件\n# vim  /root/logbak.sh\n# 编写备份脚本,备份后的文件名包含日期标签,防止后面的备份将前面的备份数据覆盖\n# 注意 date 命令需要使用反引号括起来,反引号在键盘<tab>键上面\n\ntar -czf log-`date +%Y%m%d`.tar.gz /var/log \n\n# crontab -e #编写计划任务，执行备份脚本\n00 03 * * 5 /home/wenmin/datas/logbak.sh（23）脚本编写 求和 函数运算 function xx()#!/bin/bash\n\nfunction sum()\n{\n s=0;\n s=$[$1+$2]\n echo $s\n}\nread -p \"input your parameter \" p1\nread -p \"input your parameter \" p2\n\nsum $p1 $p2\n\nfunction multi()\n{\n r=0;\n r=$[$1/$2]\n echo $r\n}\nread -p \"input your parameter \" x1\nread -p \"input your parameter \" x2\n\nmulti $x1 $x2\n\nv1=1\nv2=2\nlet v3=$v1+$v2\necho $v3（24）脚本编写 case — esac 分支结构表达式#!/bin/bash \n\ncase $1 in \n1) \n echo \"wenmin \"\n;;\n2)\n echo \"wenxing \"\n;; \n3)  \n echo \"wemchang \"\n;;\n4) \n echo \"yijun\"\n;;\n5)\n echo \"sinian\"\n;;\n6)  \n echo \"sikeng\"\n;;\n7) \n echo \"yanna\"\n;;\n*)\n echo \"danlian\"\n;; \nesac（25）# 定义要监控的页面地址，对 tomcat 状态进行重启或维护#!/bin/sh  \n# function:自动监控tomcat进程，挂了就执行重启操作  \n# author:huanghong  \n# DEFINE  \n\n# 获取tomcat PPID  \nTomcatID=$(ps -ef |grep tomcat |grep -w 'apache-tomcat-7.0.75'|grep -v 'grep'|awk '{print $2}')  \n\n# tomcat_startup  \nStartTomcat=/opt/apache-tomcat-7.0.75/bin/startup.sh  \n\n\n#TomcatCache=/usr/apache-tomcat-5.5.23/work  \n\n# 定义要监控的页面地址  \nWebUrl=http://192.168.254.118:8080/\n\n# 日志输出  \nGetPageInfo=/dev/null  \nTomcatMonitorLog=/tmp/TomcatMonitor.log  \n\nMonitor()  \n  {  \n   echo \"[info]开始监控tomcat...[$(date +'%F %H:%M:%S')]\"  \n   if [ $TomcatID ]\n then  \n      echo \"[info]tomcat进程ID为:$TomcatID.\"  \n      # 获取返回状态码  \n      TomcatServiceCode=$(curl -s -o $GetPageInfo -m 10 --connect-timeout 10 $WebUrl -w %{http_code})  \n      if [ $TomcatServiceCode -eq 200 ];then  \n          echo \"[info]返回码为$TomcatServiceCode,tomcat启动成功,页面正"],[1,3,".\"  \n      else  \n          echo \"[error]访问出错，状态码为$TomcatServiceCode,错误日志已输出到$GetPageInfo\"  \n          echo \"[error]开始重启tomcat\"  \n          kill -9 $TomcatID  # 杀掉原tomcat进程  \n          sleep 3  \n          #rm -rf $TomcatCache # 清理tomcat缓存  \n          $StartTomcat  \n      fi  \n      else  \n      echo \"[error]进程不存在!tomcat自动重启...\"  \n      echo \"[info]$StartTomcat,请稍候......\"  \n      #rm -rf $TomcatCache  \n      $StartTomcat  \n    fi  \n    echo \"------------------------------\"  \n   }  \n   Monitor>>$TomcatMonitorLog（26）通过位置变量创建 Linux 系统账户及密码#!/bin/bash\n\n# 通过位置变量创建Linux 系统账户及密码\n\n# $1 是执行脚本的第一个参数，$2  是执行脚本的第二个参数\n\nuseradd \"$1\"\necho \"$2\" | passwd --stdin \"$1\"（27）对变量的传入与获取个数及打印#!/bin/bash\necho \"$0 $1 $2 $3\"  // 传入三个参数\necho $#    //获取传入参数的数量\necho $@    //打印获取传入参数\necho $*    //打印获取传入参数（28）实时监控本机内存和硬盘剩余空间，剩余内存小于500M、根分区剩余空间小于1000M时，发送报警邮件给root管理员#!/bin/bash\n\n# 实时监控本机内存和硬盘剩余空间,剩余内存小于500M、根分区剩余空间小于1000M时,发送报警邮件给root管理员\n\n# 提取根分区剩余空间\ndisk_size=$(df / | awk '/\\//{print $4}')\n\n# 提取内存剩余空空间\nmem_size=$(free | awk '/Mem/{print $4}')\nwhile :\ndo \n# 注意内存和磁盘提取的空间大小都是以 Kb 为单位\nif  [  $disk_size -le 512000 -a $mem_size -le 1024000  ]\nthen\n    mail  ‐s  \"Warning\"  root  <<EOF\n Insufficient resources,资源不足\nEOF\nfi\ndone（29）检查指定目录下是否存在 对应 文件#!/bin/bash\n\nif [ -f /home/wenmin/datas ]\nthen \necho \"File exists\"\nfi（30）脚本定义while循环语句#!/bin/bash\n\nif [ -f /home/wenmin/datas ]\nthen \necho \"File exists\"\nfi\n\n[root@rich datas]# cat while.sh \n#!/bin/bash\n\ns=0\ni=1\nwhile [ $i -le 100 ]\ndo\n        s=$[$s + $i]\n        i=$[$i + 1]\ndone\n\necho $s\necho $i（31）一键部署 LNMP（RPM 包版本）#!/bin/bash \n\n# 一键部署 LNMP(RPM 包版本)\n# 使"],[1,4," yum 安装部署 LNMP,需要提前配置好 yum 源,否则该"],[1,6,"会失败"],[1,7,"# 本脚本使用于 centos7.2 或 RHEL7.2"],[1,8,"yum -y install httpd\nyum -y install mariadb mariadb-devel mariadb-server\nyum -y install php php-mysql"],[1,10,"systemctl start httpd mariadb\nsystemctl enable httpd mariadb（32）读取控制台传入参数#!/bin/bash\nread -t 7 -p \"input your name \" NAME\necho $NAME\n\nread -t 11 -p \"input you age \" AGE\necho $AGE\n\nread -t 15 -p \"input your friend \" FRIEND\necho $FRIEND\n\nread -t 16 -p \"input your love \" LOVE\necho $LOVE（33）脚本实现 复制#!/bin/bash\n\ncp $1 $2（34）脚本实现文件存在与否的判断#!/bin/bash\n\nif [ -f file.txt ];then\n echo \"文件存在\"\nelse \n echo \"文件不存在\"\nfi"]],[0,10],[10538,10538]]],[1652689565381,["mac@macdeMacBook-Pro.local",[[-1,0,"作者：地球的外星人君\n链接：https://zhuanlan.zhihu.com/p/515140496\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[0,94],[0,0]]]],null,"mac@macdeMacBook-Pro.local"]]}