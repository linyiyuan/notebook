{"compress":true,"commitItems":[["387a0d27-a2b8-4b22-a7ff-bdc0b0c6d133",1652407919729,"",[[1652407889285,["mac@macdeMacBook-Pro.local",[[1,0,"# PSR-2\n\n\n\n"]],[0,0],[10,10]]],[1652407919365,["mac@macdeMacBook-Pro.local",[[1,0,"代码风格规范\n==================\n\n本篇规范是 [PSR-1][] 基本代码规范的继承与扩展。\n\n本规范希望通过制定一系列规范化PHP代码的规则，以减少在浏览不同作者的代码时，因代码风格的不同而造成不便。\n\n当多名程序员在多个项目中合作时，就需要一个共同的编码规范，\n而本文中的风格规范源自于多个不同项目代码风格的共同特性，\n因此，本规范的价值在于我们都遵循这个编码风格，而不是在于它本身。\n\n关键词 “必须”(\"MUST\")、“一定不可/一定不能”(\"MUST NOT\")、“需要”(\"REQUIRED\")、\n“将会”(\"SHALL\")、“不会”(\"SHALL NOT\")、“应该”(\"SHOULD\")、“不该”(\"SHOULD NOT\")、\n“推荐”(\"RECOMMENDED\")、“可以”(\"MAY\")和”可选“(\"OPTIONAL\")的详细描述可参见 [RFC 2119][] 。\n\n[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\n[PSR-0]: https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-0-cn.md\n[PSR-1]: https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-1-basic-coding-standard-cn.md\n\n\n1. 概览\n-----------\n\n- 代码**必须**遵循 [PSR-1][] 中的编码规范 。\n\n- 代码**必须**使用4个空格符而不是 tab键 进行缩进。\n\n- 每行的字符数**应该**软性保持在80个之内， 理论上**一定不可**多于120个， 但**一定不能**有硬性限制。\n\n- 每个 `namespace` 命名空间声明语句和 `use` 声明语句块后面，**必须**插入一个空白行。\n\n- 类的开始花括号(`{`)**必须**写在其声明后自成一行，结束花括号(`}`)也**必须**写在其主体后自成一行。\n\n- 方法的开始花括号(`{`)**必须**写在函数声明后自成一行，结束花括号(`}`)也**必须**写在函数主体后自成一行。\n\n- 类的属性和方法**必须**添加访问修饰符（`private`、`protected` 以及 `public`）， `abstract` 以及 `final` **必须**声明在访问修饰符之前，而 `static` **必须**声明在访问修饰符之后。\n  \n- 控制结构的关键字后**必须**要有一个空格符，而调用方法或函数时则**一定不能**有。\n\n- 控制结构的开始花括号(`{`)**必须**写在声明的同一行，而结束花括号(`}`)**必须**写在主体后自成一行。\n\n- 控制结构的开始左括号后和结束右括号前，都**一定不能**有空格符。\n\n##"],[1,2,"1.1. 例子\n\n以下例子程序简单地展示了以上大部分规范：\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooInterface;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass Foo extends Bar implements FooInterface\n{\n    public function sampleFunction($a, $b = null)\n    {\n        if ($a === $b) {\n            bar();\n        } elseif ($a > $b) {\n            $foo->bar($arg1);\n        } else {\n            BazClass::bar($arg2, $arg3);\n        }\n    }\n\n    final public static function bar()\n    {\n        // method body\n    }\n}\n```\n\n2. 通则\n----------\n\n### 2.1 基本编码准则\n\n代码**必须**符合 ["],[1,6,"1][] 中的所有规范。\n\n### "],[1,7,".2 文件"],[1,8,"\n所有PHP文件**必须**使用`Unix LF (linefeed)`作为行的结束符。\n\n所有PHP文件**必须**以一个空白行作为结束。\n\n纯PHP代码文件**必须**省略最后的 `?>` 结束标签。\n\n### 2.3. 行\n\n行的长度**一定不能**有硬性的约束。\n\n软性的长度约束**一定**要限制在120个字符以内，若超过此长度，带代码规范检查的编辑器**一定**要发出警告，不过**一定不可**发出错误提示。\n\n每行**不应该**多于80个字符，大于80字符的行**应该**折成多行。\n\n非空行后**一定不能**有多余的空格符。\n\n空行**可以**使得阅读代码更加方便以及有助于代码的分块。\n\n每行**一定不能**存在多于一条语句。\n\n### 2.4. 缩进\n\n代码**必须**使用4个空格符的缩进，**一定不能**用 tab键 。\n\n> 备注: 使用空格而不是tab键缩进的好处在于，\n> 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。\n> 并且，使用空格缩进，让对齐变得更方便。\n\n### 2.5. 关键字 以及 True/False/Null\n\nPHP所有 [关键字][]**必须**全部小写。\n\n常量 `true` 、`false` 和 `null` 也**必须**全部小写。\n\n[关键字]: http://php.net/manual/en/reserved.keywords.php\n\n\n\n3. namespace 以及 use 声明\n---------------------------------\n\n`namespace` 声明后 必须 插入一个空白行。\n\n所有 `use` 必须 在 `namespace` 后声明。\n\n每条 `use` 声明语句 必须 只有一个 `use` 关键词。\n\n`use` 声明语句块后 必须 要有一个空白行。\n\n例如：\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\n// ... additional PHP code ...\n\n```\n\n\n4. 类、属性和方法\n-----------------------------------\n\n此处的“类”泛指所有的class类、接口以及traits可复用代码块。\n\n### 4.1. 扩展与继承\n\n关键词 `extends` 和 `implements`**必须**写在类名称的同一行。\n\n类的开始花括号**必须**独占一行，结束花括号也**必须**在类主体后独占一行。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\n{\n    // constants, properties, methods\n}\n```\n\n`implements` 的继承列表也**可以**分成多行，这样的话，每个继承接口名称都**必须**分开独立成行，包括第一个。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements\n    \\ArrayAccess,\n    \\Countable,\n    \\Serializable\n{\n    // constants, properties, methods\n}\n```\n\n### 4.2. 属性\n\n每个属性都**必须**添加访问修饰符。\n\n**一定不可**使用关键字 `var` 声明一个属性。\n\n每条语句**一定不可**定义超过一个属性。\n\n**不要**使用下划线作为前缀，来区分属性是 protected 或 private。\n\n以下是属性声明的一个范例：\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public $foo = null;\n}\n```\n\n### 4.3. 方法\n\n所有方法都**必须**添加访问修饰符。\n\n**不要**使用下划线作为前缀，来区分方法是 protected 或 private。\n\n方法名称后**一定不能**有空格符，其开始花括号**必须**独占一行，结束花括号也**必须**在方法主体后单独成一行。参数左括号后和右括号前**一定不能**有空格。\n\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function fooBarBaz($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n```    \n\n### 4.4. 方法的参数\n\n参数列表中，每个逗号后面**必须**要有一个空格，而逗号前面**一定不能**有空格。\n\n有默认值的参数，**必须**放到参数列表的末尾。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function foo($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n```\n\n参数列表**可以**分列成多行，这样，包括第一个参数在内的每个参数都**必须**单独成行。\n\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName(\n        ClassTypeHint $arg1,\n        &$arg2,\n        array $arg3 = []\n    ) {\n        // method body\n    }\n}\n```\n\n### 4.5. `abstract` 、 `final` 、 以及 `static`\n\n需要添加 `abstract` 或 `final` 声明时， **必须**写在访问修饰符前，而 `static` 则**必须**写在其后。\n\n```php\n<?php\nnamespace Vendor\\Package;\n\nabstract class ClassName\n{\n    protected static $foo;\n\n    abstract protected function zim();\n\n    final public static function bar()\n    {\n        // method body\n    }\n}\n```\n\n### 4.6. 方法及函数调用\n\n方法及函数调用时，方法名或函数名与参数左括号之间**一定不能**有空格，参数右括号前也 **一定不能**有空格。每个逗号前**一定不能**有空格，但其后**必须**有一个空格。\n\n```php\n<?php\nbar();\n$foo->bar($arg1);\nFoo::bar($arg2, $arg3);\n```\n\n参数**可以**分列成多行，此时包括第一个参数在内的每个参数都**必须**单独成行。\n\n```php\n<?php\n$foo->bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n```\n\n5. 控制结构\n---------------------\n\n控制结构的基本规范如下：\n\n- 控制结构关键词后**必须**有一个空格。\n- 左括号 `(` 后**一定不能**有空格。\n- 右括号 `)` 前也**一定不**能有空格。\n- 右括号 `)` 与开始花括号 `{` 间**一定**有一个空格。\n- 结构体主体**一定**要有一次缩进。\n- 结束花括号 `}` **一定**在结构体主体后单独成行。\n\n每个结构体的主体都**必须**被包含在成对的花括号之中，\n这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\n\n\n### 5.1. `if` 、 `elseif` 和 `else`\n\n标准的 `if` 结构如下代码所示，留意 括号、空格以及花括号的位置，\n注意 `else` 和 `elseif` 都与前面的结束花括号在同一行。\n\n```php\n<?php\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n```\n\n**应该**使用关键词 `elseif` 代替所有 `else if` ，以使得所有的控制关键字都像是单独的一个词。 \n\n\n### 5.2. `switch` 和 `case`\n\n标准的 `switch` 结构如下代码所示，留意括号、空格以及花括号的位置。\n`case` 语句**必须**相对 `switch` 进行一次缩进，而 `break` 语句以及 `case` 内的其它语句都 必须 相对 `case` 进行一次缩进。\n如果存在非空的 `case` 直穿语句，主体里必须有类似 `// no break` 的注释。\n\n```php\n<?php\nswitch ($expr) {\n    case 0:\n        echo 'First case, with a break';\n        break;\n    case 1:\n        echo 'Second case, which falls through';\n        // no break\n    case 2:\n    case 3:\n    case 4:\n        echo 'Third case, return instead of break';\n        return;\n    default:\n        echo 'Default case';\n        break;\n}\n```\n\n\n### 5.3. `while` 和 `do while`\n\n一个规范的 `while` 语句应该如下所示，注意其 括号、空格以及花括号的位置。\n\n```php\n<?php\nwhile ($expr) {\n    // structure body\n}\n```\n\n标准的 `do while` 语句如下所示，同样的，注意其 括号、空格以及花括号的位置。\n\n```php\n<?php\ndo {\n    // structure body;\n} while ($expr);\n```\n\n### 5.4. `for`\n\n标准的 `for` 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```php\n<?php\nfor ($i = 0; $i < 10; $i++) {\n    // for body\n}\n```\n\n### 5.5. `foreach`\n    \n标准的 `foreach` 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```php\n<?php\nforeach ($iterable as $key => $value) {\n    // foreach body\n}\n```\n\n### 5.6. `try`, `catch`\n\n标准的 `try catch` 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```php\n<?php\ntry {\n    // try body\n} catch (FirstExceptionType $e) {\n    // catch body\n} catch (OtherExceptionType $e) {\n    // catch body\n}\n```\n\n6. 闭包\n-----------\n\n闭包声明时，关键词 `function` 后以及关键词 `use` 的前后都**必须**要有一个空格。\n\n开始花括号**必须**写在声明的同一行，结束花括号**必须**紧跟主体结束的下一行。\n\n\n参数列表和变量列表的左括号后以及右括号前，**必须不能**有空格。\n\n参数和变量列表中，逗号前**必须不能**有空格，而逗号后**必须**要有空格。\n\n闭包中有默认值的参数**必须**放到列表的后面。\n\n\n标准的闭包声明语句如下所示，注意其 括号、逗号、空格以及花括号的位置。\n\n```php\n<?php\n$closureWithArgs = function ($arg1, $arg2) {\n    // body\n};\n\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n    // body\n};\n```\n\n参数列表以及变量列表**可以**分成多行，这样，包括第一个在内的每个参数或变量都**必须**单独成行，而列表的右括号与闭包的开始花括号**必须**放在同一行。\n\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\n\n```php\n<?php\n$longArgs_noVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) {\n   // body\n};\n\n$noArgs_longVars = function () use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_longVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_shortVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use ($var1) {\n   // body\n};\n\n$shortArgs_longVars = function ($arg) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n```\n\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\n\n```php\n<?php\n$foo->bar(\n    $arg1,\n    function ($arg2) use ($var1) {\n        // body\n    },\n    $arg3\n);\n```\n\n\n7. 总结\n--------------\n以上规范难免有疏忽，其中包括但不仅限于：\n\n- 全局变量和常量的定义\n\n- 函数的定义\n\n- 操作符和赋值\n\n- 行内对齐\n\n- 注释和文档描述块\n\n- 类名的前缀及后缀\n\n- 最佳实践\n\n本规范之后的修订与扩展将弥补以上不足。"]],[0,11],[8588,8588]]]],null,"mac@macdeMacBook-Pro.local"]]}